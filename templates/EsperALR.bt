//------------------------------------------------
//--- 010 Editor v11.0 Binary Template
//
//      File: Phantom Dust ALR Binary
//   Authors: UltimateBoboboFan713
//   Version: 1.0.0
//   Purpose: Stores mesh and/or texture data (?)
//  Category: Visual Assets
// File Mask: *.alr
//  ID Bytes: 11 00 00 00
//   History: 
//------------------------------------------------
struct File_ALR
{
    LittleEndian();
	struct Header 
	{
		int ID<bgcolor=cGray>; // 11 00 00 00
		int Size<bgcolor=cGreen>;
		int Flags<bgcolor=cYellow>; // (?) Example from pc00a.alr: 52 00 07 00
		int WhitespaceEndAddress<bgcolor=cLtGray>;
		int InfoSectionsCount<bgcolor=cLtGray>;
		int Unk1<bgcolor=cLtRed>; // Maybe a reference to an offet really far into the file?
		double Pad;
		int OffsetArray[InfoSectionsCount]<bgcolor=cLtBlue>;
	} header;

	while (ReadDouble() != 0x00)
	{
		if (ReadByte() == 0x15 || ReadByte() == 0x16)
		{
			struct Block0x15 
			{
				int ID<bgcolor=cLtGray>;
				int Size<bgcolor=cBlue>;
				int InfoSectionsCount<bgcolor=cLtGray>;

                // Prevents warnings if the array size will be 0.
                if (InfoSectionsCount != 0)
                {
				    struct InfoSection2
				    {
				        int Flags2<bgcolor=cYellow>; // (?) Example from pc00a.alr: 0x01 00 04 00
				        int DataSec_Start<bgcolor=cGreen>;
				        int Unk<bgcolor=cLtRed>;
				        int Unk<bgcolor=cLtRed>;
				        int UnkZ<bgcolor=cLtRed>;
				        int StaticID<bgcolor=cPurple>;
				        int Unk<bgcolor=cLtRed>;
				    } Subsection[InfoSectionsCount];
                }
			} Subfile;
		}

        if (ReadByte() == 0x14)
		{
		    struct Block0x14
		    {
			    int ID<bgcolor=cLtGray>; // 0D 00 00 00
			    int SectorSize<bgcolor=cBlue>;
                double Unk<bgcolor=cRed>;
                int Flags<bgcolor=cYellow>;
                int Unk<bgcolor=cRed>;
                local int DataSize = SectorSize - 24;
                char DataSection[DataSize]<bgcolor=cGreen>;
		    } Subfile;
        }

        if (ReadByte() == 0x13)
		{
			struct Block0x13
			{
				int ID<bgcolor=cLtGray>; // 13 00 00 00
				int SectorSize<bgcolor=cBlue>;
				int Flags<bgcolor=cYellow>; // Example from eft0601.alr: 01 00 12 00
				int Flags<bgcolor=cYellow>;
				int Unk<bgcolor=cRed>;
				int UnkZero1<bgcolor=cRed>;
				int Flags<bgcolor=cYellow>; // (?) Example from eft0601.alr: 11 00 01 00
				char padding[28]; // (?)
				// 0x[SIZE-0x3A] padding
				// 0x3A = 58
				local int DataSize1 = SectorSize - 56;
				char DataSector[DataSize1]<bgcolor=cGreen>;
			} Subfile;
		}
		
        if (ReadByte() == 0xD)
		{
		    struct Block0xD
		    {
			    int ID<bgcolor=cLtGray>; // 0D 00 00 00
			    int SectorSize<bgcolor=cBlue>;
                int Pad;
		    } Subfile;
        }

        if (ReadByte() == 0xA)
		{
		    struct Block0xA
		    {
			    int ID<bgcolor=cLtGray>; // 0A 00 00 00
			    int SectorSize<bgcolor=cBlue>;
                char Unknown[28]<bgcolor=cRed>;
                char pad[12];
		    } Subfile;
        }

        if (ReadByte() == 0x10)
		{
			struct Block0x10
			{
				int ID<bgcolor=cLtGray>; // 10 00 00 00
				int SectorSize<bgcolor=cBlue>;
				int DDS_Num<bgcolor=cPurple>;
				int TGA_Num<bgcolor=cPurple>;
                char Name[16]<bgcolor=cYellow>;

                struct DDS_Names
                {
                    char DDSName[16]<bgcolor=cYellow>;
                    unsigned char UnkPad0[16]<bgcolor=cRed>;
                } DDS[DDS_Num];
                
                struct DDS_meta
                {
                    unsigned short width<bgcolor=cLtGreen>;
                    unsigned short height<bgcolor=cLtGreen>;
                    unsigned int   unk<bgcolor=cLtRed>;
                    unsigned int   mipmap_count<bgcolor=cLtGreen>;
                    unsigned int   unk2[2]<bgcolor=cLtRed>;
                }meta[DDS_Num];

                struct TGA_Names
                {
                    char TGAName[32]<bgcolor=cYellow>;
                    unsigned char UnkPad[28]<bgcolor=cRed>;
                } TGA[TGA_Num];
			} Subfile;
		}
        
        // These blocks are only found in st##cam.alr files
        // in the Map folder. They control the camera animation
        // for stage intros.
        if (ReadByte() == 0x7)
		{
		    struct Block0x7
		    {
			    int ID<bgcolor=cLtGray>; // 07 00 00 00
			    int SectorSize<bgcolor=cBlue>;
                int Unknown[3]<bgcolor=cRed>;
                int unk;
                double pad;
                struct AnimFrames
                {
                    float FrameNum<bgcolor=cWhite>;
                    float CoordinateX<bgcolor=cRed>;
                    float CoordinateY<bgcolor=cGreen>;
                    float CoordinateZ<bgcolor=cBlue>;
                } animation[(SectorSize - 32)/16];
		    } Subfile;
        }

        if (ReadByte() == 5)
		{
			struct Block0x5
			{
				int ID<bgcolor=cLtGray>; // 05 00 00 00
				int Size<bgcolor=cBlue>;
				int Unk1<bgcolor=cRed>; // Seems to always be 00 00 20 42
				int Flags<bgcolor=cYellow>; // (?) Example from pc00a.alr: 06 00 08 00
				int FrameCount1<bgcolor=cLtBlue>;
				int FrameCount2<bgcolor=cLtBlue>; // UNK2 and UNK3 sometimes match each other in value. When they don't, UNK3 is always 0
				int FrameCount3<bgcolor=cLtBlue>;
				int Flags2<bgcolor=cYellow>; // Example from pc00a.alr: 00 02 0C 00
		
				// 0x[SIZE-0x24] DATA
				// 0x24 = 36
                local int CurrentFrame = 0;

                if (FrameCount1 != 0)
                {
                    if (Flags2 == 1048576) // 00 10 00 00
                    {
                        struct AnimType1
                        {
		    		        float Frame<bgcolor=cLtBlue>;
                            float Coord1<bgcolor=cGreen>;
                            float Coord2<bgcolor=cGreen>;
                            float Coord3<bgcolor=cGreen>;
                        }animation[FrameCount1];
                    }
                    else if (Flags2 == 525568) // 00 05 08 00
                    {
                        struct AnimType1A
                        {
		    		        float Frame<bgcolor=cLtBlue>;
                            float Coord<bgcolor=cGreen>;
                        }animation[FrameCount1];
                    }
                    else if (Flags2 == 786944) // 00 02 0C 00
                    {
                        struct AnimType1B
                        {
		    		        float Frame<bgcolor=cLtBlue>;
                            float Coord<bgcolor=cGreen>;
                            float Coord2<bgcolor=cGreen>;
                        }animation[FrameCount1];
                    }
                }

                if (FrameCount2 != 0)
                {
                    struct AnimType2
                    {
                        while (CurrentFrame < FrameCount2)
                        {
		    	    	    short Frame<bgcolor=cBlue>;
                            byte UnknownFlag<bgcolor=cRed>;
                            byte UnknownConstant<bgcolor=cRed>;
                            float UnkFloat<bgcolor=cGreen>;
                            CurrentFrame++;
                        };
                    }animation;
                    CurrentFrame = 0;
                }
                
                if (FrameCount3 != 0) // Same as AnimType1.
                {
                    struct AnimType3
                    {
                        while (CurrentFrame < FrameCount3)
                        {
		    	    	    float Frame<bgcolor=cLtBlue>;
                            float Coord1<bgcolor=cGreen>;
                            float Coord2<bgcolor=cGreen>;
                            float Coord3<bgcolor=cGreen>;
                            CurrentFrame++;
                        };
                    }animation;
                    CurrentFrame = 0;
                }
			} Subfile;
		}

        if (ReadByte() == 3)
		{
			struct Block0x3
			{
				int ID<bgcolor=cLtGray>; // 03 00 00 00
				int Size<bgcolor=cBlue>;
				int Unk1<bgcolor=cRed>; // Seems to always be 00 00 20 42
				int Flags<bgcolor=cYellow>; // (?) Example from pc00a.alr: 06 00 08 00
				int Unk2<bgcolor=cRed>;
				int Unk3<bgcolor=cRed>; // UNK2 and UNK3 sometimes match each other in value. When they don't, UNK3 is always 0
				int UnkZero1<bgcolor=cRed>;
				int Flags2<bgcolor=cYellow>; // Example from pc00a.alr: 00 02 0C 00
		
				// 0x[SIZE-0x24] DATA
				// 0x24 = 36
                local int VertCount = 0;
                while (VertCount < (Size - 32)/8)
                {
				    float UnkNum<bgcolor=cYellow>;
                    float Float<bgcolor=cGreen>;
                    VertCount++;
                };
			} Subfile;
		}

        if (ReadByte() == 2)
		{
			struct Block0x2
			{
				int ID<bgcolor=cLtGray>; // 01 00 00 00
				int SectorSize<bgcolor=cBlue>;
				int Flags<bgcolor=cYellow>; // Example from eft0601.alr: 01 00 12 00
				int Unk<bgcolor=cRed>;
				int Unk<bgcolor=cRed>;
				int UnkZero1<bgcolor=cRed>;
				int Flags<bgcolor=cYellow>; // (?) Example from eft0601.alr: 11 00 01 00
				int Unk<bgcolor=cRed>;
				int Flags<bgcolor=cYellow>; // (?) Example from eft0601.alr: 00 11 01 00
                int Unk<bgcolor=cRed>;
                int Unk<bgcolor=cRed>;
                int Unk<bgcolor=cRed>;
				char padding[12];
				local int DataSize1 = SectorSize - 60;
                char datablock[DataSize1]<bgcolor=cGreen>;
			} Subfile;
		}        

		if (ReadByte() == 1)
		{
			struct Block0x1
			{
				int ID<bgcolor=cLtGray>; // 01 00 00 00
				int SectorSize<bgcolor=cBlue>;
				int Flags<bgcolor=cYellow>; // Example from eft0601.alr: 01 00 12 00
				int Unk1<bgcolor=cRed>;
				int Unk2<bgcolor=cRed>;
				int UnkZero1<bgcolor=cRed>;
				int Flags<bgcolor=cYellow>; // (?) Example from eft0601.alr: 11 00 01 00
				int Unk3<bgcolor=cRed>;
				int Flags<bgcolor=cYellow>; // (?) Example from eft0601.alr: 00 11 01 00
				int Unk4<bgcolor=cRed>;
                char padding[16]; // (?)
				int DataSector[(SectorSize - 56)/4]<bgcolor=cGreen>; // This is definitely the wrong data type
			} Subfile;
		}
        
        if (ReadByte() == 0x00)
		{
		    struct Block0x0
		    {
			    int ID<bgcolor=cLtGray>; // 00 00 00 00
			    int SectorSize<bgcolor=cBlue>;
                if (SectorSize > 8)
                {
                    local int DataSize1 = SectorSize - 8;
                    char DataSector[DataSize1]<bgcolor=cGreen>;
                }
		    } Subfile;
        }
        
        if (FEof() == 1)
        {
            // Checks if we're at the end of the file
            break;
        }

        if (ReadByte() != 0x00 && ReadByte() != 0x01 && ReadByte() != 0x02 && ReadByte() != 0x03 && ReadByte() !=0x05 && ReadByte() != 0x7 && ReadByte() != 0x0A && ReadByte() && ReadByte() != 0x0D && ReadByte() != 0x10 && ReadByte() != 0x13 && ReadByte() != 0x14 && ReadByte() != 0x15 && ReadByte() != 0x16)
        {
            break;
        }
	}

    if (FEof() != 1)
    {
        // Checks if we're at the end of the file
        char Whitespace[header.WhitespaceEndAddress - (FTell())]<bgcolor=cGray>;
    }
} file;